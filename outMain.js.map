{
  "version": 3,
  "sources": ["main.ts"],
  "sourcesContent": ["import { promises as fs } from 'fs';\n\nasync function jobArrived(s: Switch, flowElement: FlowElement, job: Job) {\n    //get variables from script element\n    let datasetName: string = await flowElement.getPropertyStringValue(\"datasetName\") as string;\n    let keyAndJSONpaths: string[] = await flowElement.getPropertyStringValue(\"keyAndJSONpaths\") as string[];\n\n    //get data\n    let filePath = await job.getDataset(datasetName, AccessLevel.ReadWrite);\n    let data = await fs.readFile(filePath, 'utf8');\n    let jsonData = JSON.parse(data);\n    await job.log(LogLevel.Info, jsonData);\n\n    //define the data getter function\n    function getValueByPath(jsonData: Record<string, any>, keyAndJSONpath: string): any {\n        return keyAndJSONpath\n            .replace(/\\[(\\d+)\\]/g, '.$1') // Convert \"[0]\" into \".0\"\n            .split('.')                    // Now split normally\n            .reduce((acc, key) => acc?.[key], jsonData);\n    }\n\n    //loop through keyAndJSONpaths logging each returned value and creating private data keys\n    for (let keyAndJSONpath of keyAndJSONpaths) {\n        let [pdkey, JSONpath] = keyAndJSONpath.split(\"::\");\n        let value = getValueByPath(jsonData, JSONpath);\n        await job.setPrivateData(pdkey, value);\n        await job.log(LogLevel.Warning, \n            `Path \"${JSONpath}\" produced extracted value: ${value} which will be set to private data key ${pdkey}`\n        );\n    }\n\n    // //loop through keyAndJSONpaths logging each returned value\n    // for (const path of keyAndJSONpaths) {\n    //     const value = getValueByPath(jsonData, path);\n    //     await job.log(LogLevel.Warning, `Path \"${path}\" produced extracted value: ${value}`);\n    // }\n\n    await job.sendToSingle();\n}\n"],
  "mappings": ";;;;AAAA,IAAA,OAAA,QAAA,IAAA;AAEA,eAAe,WAAW,GAAW,aAA0B,KAAQ;AAEnE,MAAI,cAAsB,MAAM,YAAY,uBAAuB,aAAa;AAChF,MAAI,kBAA4B,MAAM,YAAY,uBAAuB,iBAAiB;AAG1F,MAAI,WAAW,MAAM,IAAI,WAAW,aAAa,YAAY,SAAS;AACtE,MAAI,OAAO,MAAM,KAAA,SAAG,SAAS,UAAU,MAAM;AAC7C,MAAI,WAAW,KAAK,MAAM,IAAI;AAC9B,QAAM,IAAI,IAAI,SAAS,MAAM,QAAQ;AAGrC,WAAS,eAAeA,WAA+B,gBAAsB;AACzE,WAAO,eACF,QAAQ,cAAc,KAAK,EAC3B,MAAM,GAAG,EACT,OAAO,CAAC,KAAK,QAAQ,QAAG,QAAH,QAAG,SAAA,SAAH,IAAM,GAAG,GAAGA,SAAQ;EAClD;AAGA,WAAS,kBAAkB,iBAAiB;AACxC,QAAI,CAAC,OAAO,QAAQ,IAAI,eAAe,MAAM,IAAI;AACjD,QAAI,QAAQ,eAAe,UAAU,QAAQ;AAC7C,UAAM,IAAI,eAAe,OAAO,KAAK;AACrC,UAAM,IAAI,IAAI,SAAS,SACnB,SAAS,QAAQ,+BAA+B,KAAK,0CAA0C,KAAK,EAAE;;AAU9G,QAAM,IAAI,aAAY;AAC1B;",
  "names": ["jsonData"]
}
